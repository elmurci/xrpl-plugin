// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: org/xrpl/rpc/v1/get_ledger_entry.proto

#include "org/xrpl/rpc/v1/get_ledger_entry.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {
PROTOBUF_CONSTEXPR GetLedgerEntryRequest::GetLedgerEntryRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.client_ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ledger_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetLedgerEntryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetLedgerEntryRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetLedgerEntryRequestDefaultTypeInternal() {}
  union {
    GetLedgerEntryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetLedgerEntryRequestDefaultTypeInternal _GetLedgerEntryRequest_default_instance_;
PROTOBUF_CONSTEXPR GetLedgerEntryResponse::GetLedgerEntryResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ledger_object_)*/nullptr
  , /*decltype(_impl_.ledger_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetLedgerEntryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetLedgerEntryResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetLedgerEntryResponseDefaultTypeInternal() {}
  union {
    GetLedgerEntryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetLedgerEntryResponseDefaultTypeInternal _GetLedgerEntryResponse_default_instance_;
}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org
static ::_pb::Metadata file_level_metadata_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto = nullptr;

const uint32_t TableStruct_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerEntryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerEntryRequest, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerEntryRequest, _impl_.ledger_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerEntryRequest, _impl_.client_ip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerEntryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerEntryResponse, _impl_.ledger_object_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerEntryResponse, _impl_.ledger_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::org::xrpl::rpc::v1::GetLedgerEntryRequest)},
  { 9, -1, -1, sizeof(::org::xrpl::rpc::v1::GetLedgerEntryResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::org::xrpl::rpc::v1::_GetLedgerEntryRequest_default_instance_._instance,
  &::org::xrpl::rpc::v1::_GetLedgerEntryResponse_default_instance_._instance,
};

const char descriptor_table_protodef_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&org/xrpl/rpc/v1/get_ledger_entry.proto"
  "\022\017org.xrpl.rpc.v1\032\034org/xrpl/rpc/v1/ledge"
  "r.proto\"i\n\025GetLedgerEntryRequest\022\013\n\003key\030"
  "\001 \001(\014\0220\n\006ledger\030\002 \001(\0132 .org.xrpl.rpc.v1."
  "LedgerSpecifier\022\021\n\tclient_ip\030\003 \001(\t\"\203\001\n\026G"
  "etLedgerEntryResponse\0227\n\rledger_object\030\001"
  " \001(\0132 .org.xrpl.rpc.v1.RawLedgerObject\0220"
  "\n\006ledger\030\002 \001(\0132 .org.xrpl.rpc.v1.LedgerS"
  "pecifierB\023\n\017org.xrpl.rpc.v1P\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto_deps[1] = {
  &::descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_2eproto,
};
static ::_pbi::once_flag descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto = {
    false, false, 357, descriptor_table_protodef_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto,
    "org/xrpl/rpc/v1/get_ledger_entry.proto",
    &descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto_once, descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto::offsets,
    file_level_metadata_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto, file_level_enum_descriptors_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto,
    file_level_service_descriptors_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto_getter() {
  return &descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto(&descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto);
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {

// ===================================================================

class GetLedgerEntryRequest::_Internal {
 public:
  static const ::org::xrpl::rpc::v1::LedgerSpecifier& ledger(const GetLedgerEntryRequest* msg);
};

const ::org::xrpl::rpc::v1::LedgerSpecifier&
GetLedgerEntryRequest::_Internal::ledger(const GetLedgerEntryRequest* msg) {
  return *msg->_impl_.ledger_;
}
void GetLedgerEntryRequest::clear_ledger() {
  if (GetArenaForAllocation() == nullptr && _impl_.ledger_ != nullptr) {
    delete _impl_.ledger_;
  }
  _impl_.ledger_ = nullptr;
}
GetLedgerEntryRequest::GetLedgerEntryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:org.xrpl.rpc.v1.GetLedgerEntryRequest)
}
GetLedgerEntryRequest::GetLedgerEntryRequest(const GetLedgerEntryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetLedgerEntryRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.client_ip_){}
    , decltype(_impl_.ledger_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.client_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_ip().empty()) {
    _this->_impl_.client_ip_.Set(from._internal_client_ip(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_ledger()) {
    _this->_impl_.ledger_ = new ::org::xrpl::rpc::v1::LedgerSpecifier(*from._impl_.ledger_);
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.GetLedgerEntryRequest)
}

inline void GetLedgerEntryRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.client_ip_){}
    , decltype(_impl_.ledger_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.client_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetLedgerEntryRequest::~GetLedgerEntryRequest() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.GetLedgerEntryRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetLedgerEntryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  _impl_.client_ip_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ledger_;
}

void GetLedgerEntryRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetLedgerEntryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.GetLedgerEntryRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.client_ip_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.ledger_ != nullptr) {
    delete _impl_.ledger_;
  }
  _impl_.ledger_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLedgerEntryRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.LedgerSpecifier ledger = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ledger(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string client_ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_client_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "org.xrpl.rpc.v1.GetLedgerEntryRequest.client_ip"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetLedgerEntryRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.GetLedgerEntryRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  // .org.xrpl.rpc.v1.LedgerSpecifier ledger = 2;
  if (this->_internal_has_ledger()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::ledger(this),
        _Internal::ledger(this).GetCachedSize(), target, stream);
  }

  // string client_ip = 3;
  if (!this->_internal_client_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_ip().data(), static_cast<int>(this->_internal_client_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "org.xrpl.rpc.v1.GetLedgerEntryRequest.client_ip");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_client_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.GetLedgerEntryRequest)
  return target;
}

size_t GetLedgerEntryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.GetLedgerEntryRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // string client_ip = 3;
  if (!this->_internal_client_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_ip());
  }

  // .org.xrpl.rpc.v1.LedgerSpecifier ledger = 2;
  if (this->_internal_has_ledger()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ledger_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetLedgerEntryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetLedgerEntryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetLedgerEntryRequest::GetClassData() const { return &_class_data_; }


void GetLedgerEntryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetLedgerEntryRequest*>(&to_msg);
  auto& from = static_cast<const GetLedgerEntryRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.GetLedgerEntryRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_client_ip().empty()) {
    _this->_internal_set_client_ip(from._internal_client_ip());
  }
  if (from._internal_has_ledger()) {
    _this->_internal_mutable_ledger()->::org::xrpl::rpc::v1::LedgerSpecifier::MergeFrom(
        from._internal_ledger());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetLedgerEntryRequest::CopyFrom(const GetLedgerEntryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.GetLedgerEntryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLedgerEntryRequest::IsInitialized() const {
  return true;
}

void GetLedgerEntryRequest::InternalSwap(GetLedgerEntryRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.client_ip_, lhs_arena,
      &other->_impl_.client_ip_, rhs_arena
  );
  swap(_impl_.ledger_, other->_impl_.ledger_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLedgerEntryRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto_getter, &descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto_once,
      file_level_metadata_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto[0]);
}

// ===================================================================

class GetLedgerEntryResponse::_Internal {
 public:
  static const ::org::xrpl::rpc::v1::RawLedgerObject& ledger_object(const GetLedgerEntryResponse* msg);
  static const ::org::xrpl::rpc::v1::LedgerSpecifier& ledger(const GetLedgerEntryResponse* msg);
};

const ::org::xrpl::rpc::v1::RawLedgerObject&
GetLedgerEntryResponse::_Internal::ledger_object(const GetLedgerEntryResponse* msg) {
  return *msg->_impl_.ledger_object_;
}
const ::org::xrpl::rpc::v1::LedgerSpecifier&
GetLedgerEntryResponse::_Internal::ledger(const GetLedgerEntryResponse* msg) {
  return *msg->_impl_.ledger_;
}
void GetLedgerEntryResponse::clear_ledger_object() {
  if (GetArenaForAllocation() == nullptr && _impl_.ledger_object_ != nullptr) {
    delete _impl_.ledger_object_;
  }
  _impl_.ledger_object_ = nullptr;
}
void GetLedgerEntryResponse::clear_ledger() {
  if (GetArenaForAllocation() == nullptr && _impl_.ledger_ != nullptr) {
    delete _impl_.ledger_;
  }
  _impl_.ledger_ = nullptr;
}
GetLedgerEntryResponse::GetLedgerEntryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:org.xrpl.rpc.v1.GetLedgerEntryResponse)
}
GetLedgerEntryResponse::GetLedgerEntryResponse(const GetLedgerEntryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetLedgerEntryResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ledger_object_){nullptr}
    , decltype(_impl_.ledger_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ledger_object()) {
    _this->_impl_.ledger_object_ = new ::org::xrpl::rpc::v1::RawLedgerObject(*from._impl_.ledger_object_);
  }
  if (from._internal_has_ledger()) {
    _this->_impl_.ledger_ = new ::org::xrpl::rpc::v1::LedgerSpecifier(*from._impl_.ledger_);
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.GetLedgerEntryResponse)
}

inline void GetLedgerEntryResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ledger_object_){nullptr}
    , decltype(_impl_.ledger_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetLedgerEntryResponse::~GetLedgerEntryResponse() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.GetLedgerEntryResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetLedgerEntryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.ledger_object_;
  if (this != internal_default_instance()) delete _impl_.ledger_;
}

void GetLedgerEntryResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetLedgerEntryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.GetLedgerEntryResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.ledger_object_ != nullptr) {
    delete _impl_.ledger_object_;
  }
  _impl_.ledger_object_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ledger_ != nullptr) {
    delete _impl_.ledger_;
  }
  _impl_.ledger_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLedgerEntryResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.RawLedgerObject ledger_object = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ledger_object(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.LedgerSpecifier ledger = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ledger(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetLedgerEntryResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.GetLedgerEntryResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.RawLedgerObject ledger_object = 1;
  if (this->_internal_has_ledger_object()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ledger_object(this),
        _Internal::ledger_object(this).GetCachedSize(), target, stream);
  }

  // .org.xrpl.rpc.v1.LedgerSpecifier ledger = 2;
  if (this->_internal_has_ledger()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::ledger(this),
        _Internal::ledger(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.GetLedgerEntryResponse)
  return target;
}

size_t GetLedgerEntryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.GetLedgerEntryResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.RawLedgerObject ledger_object = 1;
  if (this->_internal_has_ledger_object()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ledger_object_);
  }

  // .org.xrpl.rpc.v1.LedgerSpecifier ledger = 2;
  if (this->_internal_has_ledger()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ledger_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetLedgerEntryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetLedgerEntryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetLedgerEntryResponse::GetClassData() const { return &_class_data_; }


void GetLedgerEntryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetLedgerEntryResponse*>(&to_msg);
  auto& from = static_cast<const GetLedgerEntryResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.GetLedgerEntryResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ledger_object()) {
    _this->_internal_mutable_ledger_object()->::org::xrpl::rpc::v1::RawLedgerObject::MergeFrom(
        from._internal_ledger_object());
  }
  if (from._internal_has_ledger()) {
    _this->_internal_mutable_ledger()->::org::xrpl::rpc::v1::LedgerSpecifier::MergeFrom(
        from._internal_ledger());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetLedgerEntryResponse::CopyFrom(const GetLedgerEntryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.GetLedgerEntryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLedgerEntryResponse::IsInitialized() const {
  return true;
}

void GetLedgerEntryResponse::InternalSwap(GetLedgerEntryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetLedgerEntryResponse, _impl_.ledger_)
      + sizeof(GetLedgerEntryResponse::_impl_.ledger_)
      - PROTOBUF_FIELD_OFFSET(GetLedgerEntryResponse, _impl_.ledger_object_)>(
          reinterpret_cast<char*>(&_impl_.ledger_object_),
          reinterpret_cast<char*>(&other->_impl_.ledger_object_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLedgerEntryResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto_getter, &descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto_once,
      file_level_metadata_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::GetLedgerEntryRequest*
Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::GetLedgerEntryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::org::xrpl::rpc::v1::GetLedgerEntryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::GetLedgerEntryResponse*
Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::GetLedgerEntryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::org::xrpl::rpc::v1::GetLedgerEntryResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
