// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: org/xrpl/rpc/v1/xrp_ledger.proto

#include "org/xrpl/rpc/v1/xrp_ledger.pb.h"
#include "org/xrpl/rpc/v1/xrp_ledger.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {

static const char* XRPLedgerAPIService_method_names[] = {
  "/org.xrpl.rpc.v1.XRPLedgerAPIService/GetLedger",
  "/org.xrpl.rpc.v1.XRPLedgerAPIService/GetLedgerEntry",
  "/org.xrpl.rpc.v1.XRPLedgerAPIService/GetLedgerData",
  "/org.xrpl.rpc.v1.XRPLedgerAPIService/GetLedgerDiff",
};

std::unique_ptr< XRPLedgerAPIService::Stub> XRPLedgerAPIService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< XRPLedgerAPIService::Stub> stub(new XRPLedgerAPIService::Stub(channel, options));
  return stub;
}

XRPLedgerAPIService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetLedger_(XRPLedgerAPIService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLedgerEntry_(XRPLedgerAPIService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLedgerData_(XRPLedgerAPIService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLedgerDiff_(XRPLedgerAPIService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status XRPLedgerAPIService::Stub::GetLedger(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerRequest& request, ::org::xrpl::rpc::v1::GetLedgerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::org::xrpl::rpc::v1::GetLedgerRequest, ::org::xrpl::rpc::v1::GetLedgerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetLedger_, context, request, response);
}

void XRPLedgerAPIService::Stub::async::GetLedger(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerRequest* request, ::org::xrpl::rpc::v1::GetLedgerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::org::xrpl::rpc::v1::GetLedgerRequest, ::org::xrpl::rpc::v1::GetLedgerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLedger_, context, request, response, std::move(f));
}

void XRPLedgerAPIService::Stub::async::GetLedger(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerRequest* request, ::org::xrpl::rpc::v1::GetLedgerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLedger_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetLedgerResponse>* XRPLedgerAPIService::Stub::PrepareAsyncGetLedgerRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::org::xrpl::rpc::v1::GetLedgerResponse, ::org::xrpl::rpc::v1::GetLedgerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetLedger_, context, request);
}

::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetLedgerResponse>* XRPLedgerAPIService::Stub::AsyncGetLedgerRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLedgerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status XRPLedgerAPIService::Stub::GetLedgerEntry(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerEntryRequest& request, ::org::xrpl::rpc::v1::GetLedgerEntryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::org::xrpl::rpc::v1::GetLedgerEntryRequest, ::org::xrpl::rpc::v1::GetLedgerEntryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetLedgerEntry_, context, request, response);
}

void XRPLedgerAPIService::Stub::async::GetLedgerEntry(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerEntryRequest* request, ::org::xrpl::rpc::v1::GetLedgerEntryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::org::xrpl::rpc::v1::GetLedgerEntryRequest, ::org::xrpl::rpc::v1::GetLedgerEntryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLedgerEntry_, context, request, response, std::move(f));
}

void XRPLedgerAPIService::Stub::async::GetLedgerEntry(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerEntryRequest* request, ::org::xrpl::rpc::v1::GetLedgerEntryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLedgerEntry_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetLedgerEntryResponse>* XRPLedgerAPIService::Stub::PrepareAsyncGetLedgerEntryRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerEntryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::org::xrpl::rpc::v1::GetLedgerEntryResponse, ::org::xrpl::rpc::v1::GetLedgerEntryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetLedgerEntry_, context, request);
}

::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetLedgerEntryResponse>* XRPLedgerAPIService::Stub::AsyncGetLedgerEntryRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerEntryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLedgerEntryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status XRPLedgerAPIService::Stub::GetLedgerData(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerDataRequest& request, ::org::xrpl::rpc::v1::GetLedgerDataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::org::xrpl::rpc::v1::GetLedgerDataRequest, ::org::xrpl::rpc::v1::GetLedgerDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetLedgerData_, context, request, response);
}

void XRPLedgerAPIService::Stub::async::GetLedgerData(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerDataRequest* request, ::org::xrpl::rpc::v1::GetLedgerDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::org::xrpl::rpc::v1::GetLedgerDataRequest, ::org::xrpl::rpc::v1::GetLedgerDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLedgerData_, context, request, response, std::move(f));
}

void XRPLedgerAPIService::Stub::async::GetLedgerData(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerDataRequest* request, ::org::xrpl::rpc::v1::GetLedgerDataResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLedgerData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetLedgerDataResponse>* XRPLedgerAPIService::Stub::PrepareAsyncGetLedgerDataRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::org::xrpl::rpc::v1::GetLedgerDataResponse, ::org::xrpl::rpc::v1::GetLedgerDataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetLedgerData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetLedgerDataResponse>* XRPLedgerAPIService::Stub::AsyncGetLedgerDataRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerDataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLedgerDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status XRPLedgerAPIService::Stub::GetLedgerDiff(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerDiffRequest& request, ::org::xrpl::rpc::v1::GetLedgerDiffResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::org::xrpl::rpc::v1::GetLedgerDiffRequest, ::org::xrpl::rpc::v1::GetLedgerDiffResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetLedgerDiff_, context, request, response);
}

void XRPLedgerAPIService::Stub::async::GetLedgerDiff(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerDiffRequest* request, ::org::xrpl::rpc::v1::GetLedgerDiffResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::org::xrpl::rpc::v1::GetLedgerDiffRequest, ::org::xrpl::rpc::v1::GetLedgerDiffResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLedgerDiff_, context, request, response, std::move(f));
}

void XRPLedgerAPIService::Stub::async::GetLedgerDiff(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerDiffRequest* request, ::org::xrpl::rpc::v1::GetLedgerDiffResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLedgerDiff_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetLedgerDiffResponse>* XRPLedgerAPIService::Stub::PrepareAsyncGetLedgerDiffRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerDiffRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::org::xrpl::rpc::v1::GetLedgerDiffResponse, ::org::xrpl::rpc::v1::GetLedgerDiffRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetLedgerDiff_, context, request);
}

::grpc::ClientAsyncResponseReader< ::org::xrpl::rpc::v1::GetLedgerDiffResponse>* XRPLedgerAPIService::Stub::AsyncGetLedgerDiffRaw(::grpc::ClientContext* context, const ::org::xrpl::rpc::v1::GetLedgerDiffRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLedgerDiffRaw(context, request, cq);
  result->StartCall();
  return result;
}

XRPLedgerAPIService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      XRPLedgerAPIService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< XRPLedgerAPIService::Service, ::org::xrpl::rpc::v1::GetLedgerRequest, ::org::xrpl::rpc::v1::GetLedgerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](XRPLedgerAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::org::xrpl::rpc::v1::GetLedgerRequest* req,
             ::org::xrpl::rpc::v1::GetLedgerResponse* resp) {
               return service->GetLedger(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      XRPLedgerAPIService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< XRPLedgerAPIService::Service, ::org::xrpl::rpc::v1::GetLedgerEntryRequest, ::org::xrpl::rpc::v1::GetLedgerEntryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](XRPLedgerAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::org::xrpl::rpc::v1::GetLedgerEntryRequest* req,
             ::org::xrpl::rpc::v1::GetLedgerEntryResponse* resp) {
               return service->GetLedgerEntry(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      XRPLedgerAPIService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< XRPLedgerAPIService::Service, ::org::xrpl::rpc::v1::GetLedgerDataRequest, ::org::xrpl::rpc::v1::GetLedgerDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](XRPLedgerAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::org::xrpl::rpc::v1::GetLedgerDataRequest* req,
             ::org::xrpl::rpc::v1::GetLedgerDataResponse* resp) {
               return service->GetLedgerData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      XRPLedgerAPIService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< XRPLedgerAPIService::Service, ::org::xrpl::rpc::v1::GetLedgerDiffRequest, ::org::xrpl::rpc::v1::GetLedgerDiffResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](XRPLedgerAPIService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::org::xrpl::rpc::v1::GetLedgerDiffRequest* req,
             ::org::xrpl::rpc::v1::GetLedgerDiffResponse* resp) {
               return service->GetLedgerDiff(ctx, req, resp);
             }, this)));
}

XRPLedgerAPIService::Service::~Service() {
}

::grpc::Status XRPLedgerAPIService::Service::GetLedger(::grpc::ServerContext* context, const ::org::xrpl::rpc::v1::GetLedgerRequest* request, ::org::xrpl::rpc::v1::GetLedgerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status XRPLedgerAPIService::Service::GetLedgerEntry(::grpc::ServerContext* context, const ::org::xrpl::rpc::v1::GetLedgerEntryRequest* request, ::org::xrpl::rpc::v1::GetLedgerEntryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status XRPLedgerAPIService::Service::GetLedgerData(::grpc::ServerContext* context, const ::org::xrpl::rpc::v1::GetLedgerDataRequest* request, ::org::xrpl::rpc::v1::GetLedgerDataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status XRPLedgerAPIService::Service::GetLedgerDiff(::grpc::ServerContext* context, const ::org::xrpl::rpc::v1::GetLedgerDiffRequest* request, ::org::xrpl::rpc::v1::GetLedgerDiffResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace org
}  // namespace xrpl
}  // namespace rpc
}  // namespace v1

