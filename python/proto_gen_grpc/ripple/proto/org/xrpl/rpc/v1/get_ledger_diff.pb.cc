// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: org/xrpl/rpc/v1/get_ledger_diff.proto

#include "org/xrpl/rpc/v1/get_ledger_diff.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {
PROTOBUF_CONSTEXPR GetLedgerDiffRequest::GetLedgerDiffRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.client_ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_ledger_)*/nullptr
  , /*decltype(_impl_.desired_ledger_)*/nullptr
  , /*decltype(_impl_.include_blobs_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetLedgerDiffRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetLedgerDiffRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetLedgerDiffRequestDefaultTypeInternal() {}
  union {
    GetLedgerDiffRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetLedgerDiffRequestDefaultTypeInternal _GetLedgerDiffRequest_default_instance_;
PROTOBUF_CONSTEXPR GetLedgerDiffResponse::GetLedgerDiffResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ledger_objects_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetLedgerDiffResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetLedgerDiffResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetLedgerDiffResponseDefaultTypeInternal() {}
  union {
    GetLedgerDiffResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetLedgerDiffResponseDefaultTypeInternal _GetLedgerDiffResponse_default_instance_;
}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org
static ::_pb::Metadata file_level_metadata_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdiff_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdiff_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdiff_2eproto = nullptr;

const uint32_t TableStruct_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdiff_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerDiffRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerDiffRequest, _impl_.base_ledger_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerDiffRequest, _impl_.desired_ledger_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerDiffRequest, _impl_.include_blobs_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerDiffRequest, _impl_.client_ip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerDiffResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerDiffResponse, _impl_.ledger_objects_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::org::xrpl::rpc::v1::GetLedgerDiffRequest)},
  { 10, -1, -1, sizeof(::org::xrpl::rpc::v1::GetLedgerDiffResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::org::xrpl::rpc::v1::_GetLedgerDiffRequest_default_instance_._instance,
  &::org::xrpl::rpc::v1::_GetLedgerDiffResponse_default_instance_._instance,
};

const char descriptor_table_protodef_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdiff_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%org/xrpl/rpc/v1/get_ledger_diff.proto\022"
  "\017org.xrpl.rpc.v1\032\034org/xrpl/rpc/v1/ledger"
  ".proto\"\261\001\n\024GetLedgerDiffRequest\0225\n\013base_"
  "ledger\030\001 \001(\0132 .org.xrpl.rpc.v1.LedgerSpe"
  "cifier\0228\n\016desired_ledger\030\002 \001(\0132 .org.xrp"
  "l.rpc.v1.LedgerSpecifier\022\025\n\rinclude_blob"
  "s\030\003 \001(\010\022\021\n\tclient_ip\030\004 \001(\t\"R\n\025GetLedgerD"
  "iffResponse\0229\n\016ledger_objects\030\001 \001(\0132!.or"
  "g.xrpl.rpc.v1.RawLedgerObjectsB\023\n\017org.xr"
  "pl.rpc.v1P\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdiff_2eproto_deps[1] = {
  &::descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_2eproto,
};
static ::_pbi::once_flag descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdiff_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdiff_2eproto = {
    false, false, 379, descriptor_table_protodef_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdiff_2eproto,
    "org/xrpl/rpc/v1/get_ledger_diff.proto",
    &descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdiff_2eproto_once, descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdiff_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdiff_2eproto::offsets,
    file_level_metadata_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdiff_2eproto, file_level_enum_descriptors_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdiff_2eproto,
    file_level_service_descriptors_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdiff_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdiff_2eproto_getter() {
  return &descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdiff_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdiff_2eproto(&descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdiff_2eproto);
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {

// ===================================================================

class GetLedgerDiffRequest::_Internal {
 public:
  static const ::org::xrpl::rpc::v1::LedgerSpecifier& base_ledger(const GetLedgerDiffRequest* msg);
  static const ::org::xrpl::rpc::v1::LedgerSpecifier& desired_ledger(const GetLedgerDiffRequest* msg);
};

const ::org::xrpl::rpc::v1::LedgerSpecifier&
GetLedgerDiffRequest::_Internal::base_ledger(const GetLedgerDiffRequest* msg) {
  return *msg->_impl_.base_ledger_;
}
const ::org::xrpl::rpc::v1::LedgerSpecifier&
GetLedgerDiffRequest::_Internal::desired_ledger(const GetLedgerDiffRequest* msg) {
  return *msg->_impl_.desired_ledger_;
}
void GetLedgerDiffRequest::clear_base_ledger() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ledger_ != nullptr) {
    delete _impl_.base_ledger_;
  }
  _impl_.base_ledger_ = nullptr;
}
void GetLedgerDiffRequest::clear_desired_ledger() {
  if (GetArenaForAllocation() == nullptr && _impl_.desired_ledger_ != nullptr) {
    delete _impl_.desired_ledger_;
  }
  _impl_.desired_ledger_ = nullptr;
}
GetLedgerDiffRequest::GetLedgerDiffRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:org.xrpl.rpc.v1.GetLedgerDiffRequest)
}
GetLedgerDiffRequest::GetLedgerDiffRequest(const GetLedgerDiffRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetLedgerDiffRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.client_ip_){}
    , decltype(_impl_.base_ledger_){nullptr}
    , decltype(_impl_.desired_ledger_){nullptr}
    , decltype(_impl_.include_blobs_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.client_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_ip().empty()) {
    _this->_impl_.client_ip_.Set(from._internal_client_ip(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_base_ledger()) {
    _this->_impl_.base_ledger_ = new ::org::xrpl::rpc::v1::LedgerSpecifier(*from._impl_.base_ledger_);
  }
  if (from._internal_has_desired_ledger()) {
    _this->_impl_.desired_ledger_ = new ::org::xrpl::rpc::v1::LedgerSpecifier(*from._impl_.desired_ledger_);
  }
  _this->_impl_.include_blobs_ = from._impl_.include_blobs_;
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.GetLedgerDiffRequest)
}

inline void GetLedgerDiffRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.client_ip_){}
    , decltype(_impl_.base_ledger_){nullptr}
    , decltype(_impl_.desired_ledger_){nullptr}
    , decltype(_impl_.include_blobs_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.client_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetLedgerDiffRequest::~GetLedgerDiffRequest() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.GetLedgerDiffRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetLedgerDiffRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.client_ip_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_ledger_;
  if (this != internal_default_instance()) delete _impl_.desired_ledger_;
}

void GetLedgerDiffRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetLedgerDiffRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.GetLedgerDiffRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.client_ip_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.base_ledger_ != nullptr) {
    delete _impl_.base_ledger_;
  }
  _impl_.base_ledger_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.desired_ledger_ != nullptr) {
    delete _impl_.desired_ledger_;
  }
  _impl_.desired_ledger_ = nullptr;
  _impl_.include_blobs_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLedgerDiffRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.LedgerSpecifier base_ledger = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_ledger(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.LedgerSpecifier desired_ledger = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_desired_ledger(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool include_blobs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.include_blobs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string client_ip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_client_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "org.xrpl.rpc.v1.GetLedgerDiffRequest.client_ip"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetLedgerDiffRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.GetLedgerDiffRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.LedgerSpecifier base_ledger = 1;
  if (this->_internal_has_base_ledger()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base_ledger(this),
        _Internal::base_ledger(this).GetCachedSize(), target, stream);
  }

  // .org.xrpl.rpc.v1.LedgerSpecifier desired_ledger = 2;
  if (this->_internal_has_desired_ledger()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::desired_ledger(this),
        _Internal::desired_ledger(this).GetCachedSize(), target, stream);
  }

  // bool include_blobs = 3;
  if (this->_internal_include_blobs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_include_blobs(), target);
  }

  // string client_ip = 4;
  if (!this->_internal_client_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_ip().data(), static_cast<int>(this->_internal_client_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "org.xrpl.rpc.v1.GetLedgerDiffRequest.client_ip");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_client_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.GetLedgerDiffRequest)
  return target;
}

size_t GetLedgerDiffRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.GetLedgerDiffRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_ip = 4;
  if (!this->_internal_client_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_ip());
  }

  // .org.xrpl.rpc.v1.LedgerSpecifier base_ledger = 1;
  if (this->_internal_has_base_ledger()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_ledger_);
  }

  // .org.xrpl.rpc.v1.LedgerSpecifier desired_ledger = 2;
  if (this->_internal_has_desired_ledger()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.desired_ledger_);
  }

  // bool include_blobs = 3;
  if (this->_internal_include_blobs() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetLedgerDiffRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetLedgerDiffRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetLedgerDiffRequest::GetClassData() const { return &_class_data_; }


void GetLedgerDiffRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetLedgerDiffRequest*>(&to_msg);
  auto& from = static_cast<const GetLedgerDiffRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.GetLedgerDiffRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_client_ip().empty()) {
    _this->_internal_set_client_ip(from._internal_client_ip());
  }
  if (from._internal_has_base_ledger()) {
    _this->_internal_mutable_base_ledger()->::org::xrpl::rpc::v1::LedgerSpecifier::MergeFrom(
        from._internal_base_ledger());
  }
  if (from._internal_has_desired_ledger()) {
    _this->_internal_mutable_desired_ledger()->::org::xrpl::rpc::v1::LedgerSpecifier::MergeFrom(
        from._internal_desired_ledger());
  }
  if (from._internal_include_blobs() != 0) {
    _this->_internal_set_include_blobs(from._internal_include_blobs());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetLedgerDiffRequest::CopyFrom(const GetLedgerDiffRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.GetLedgerDiffRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLedgerDiffRequest::IsInitialized() const {
  return true;
}

void GetLedgerDiffRequest::InternalSwap(GetLedgerDiffRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.client_ip_, lhs_arena,
      &other->_impl_.client_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetLedgerDiffRequest, _impl_.include_blobs_)
      + sizeof(GetLedgerDiffRequest::_impl_.include_blobs_)
      - PROTOBUF_FIELD_OFFSET(GetLedgerDiffRequest, _impl_.base_ledger_)>(
          reinterpret_cast<char*>(&_impl_.base_ledger_),
          reinterpret_cast<char*>(&other->_impl_.base_ledger_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLedgerDiffRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdiff_2eproto_getter, &descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdiff_2eproto_once,
      file_level_metadata_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdiff_2eproto[0]);
}

// ===================================================================

class GetLedgerDiffResponse::_Internal {
 public:
  static const ::org::xrpl::rpc::v1::RawLedgerObjects& ledger_objects(const GetLedgerDiffResponse* msg);
};

const ::org::xrpl::rpc::v1::RawLedgerObjects&
GetLedgerDiffResponse::_Internal::ledger_objects(const GetLedgerDiffResponse* msg) {
  return *msg->_impl_.ledger_objects_;
}
void GetLedgerDiffResponse::clear_ledger_objects() {
  if (GetArenaForAllocation() == nullptr && _impl_.ledger_objects_ != nullptr) {
    delete _impl_.ledger_objects_;
  }
  _impl_.ledger_objects_ = nullptr;
}
GetLedgerDiffResponse::GetLedgerDiffResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:org.xrpl.rpc.v1.GetLedgerDiffResponse)
}
GetLedgerDiffResponse::GetLedgerDiffResponse(const GetLedgerDiffResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetLedgerDiffResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ledger_objects_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ledger_objects()) {
    _this->_impl_.ledger_objects_ = new ::org::xrpl::rpc::v1::RawLedgerObjects(*from._impl_.ledger_objects_);
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.GetLedgerDiffResponse)
}

inline void GetLedgerDiffResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ledger_objects_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetLedgerDiffResponse::~GetLedgerDiffResponse() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.GetLedgerDiffResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetLedgerDiffResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.ledger_objects_;
}

void GetLedgerDiffResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetLedgerDiffResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.GetLedgerDiffResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.ledger_objects_ != nullptr) {
    delete _impl_.ledger_objects_;
  }
  _impl_.ledger_objects_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLedgerDiffResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.RawLedgerObjects ledger_objects = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ledger_objects(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetLedgerDiffResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.GetLedgerDiffResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.RawLedgerObjects ledger_objects = 1;
  if (this->_internal_has_ledger_objects()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ledger_objects(this),
        _Internal::ledger_objects(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.GetLedgerDiffResponse)
  return target;
}

size_t GetLedgerDiffResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.GetLedgerDiffResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.RawLedgerObjects ledger_objects = 1;
  if (this->_internal_has_ledger_objects()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ledger_objects_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetLedgerDiffResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetLedgerDiffResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetLedgerDiffResponse::GetClassData() const { return &_class_data_; }


void GetLedgerDiffResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetLedgerDiffResponse*>(&to_msg);
  auto& from = static_cast<const GetLedgerDiffResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.GetLedgerDiffResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ledger_objects()) {
    _this->_internal_mutable_ledger_objects()->::org::xrpl::rpc::v1::RawLedgerObjects::MergeFrom(
        from._internal_ledger_objects());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetLedgerDiffResponse::CopyFrom(const GetLedgerDiffResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.GetLedgerDiffResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLedgerDiffResponse::IsInitialized() const {
  return true;
}

void GetLedgerDiffResponse::InternalSwap(GetLedgerDiffResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.ledger_objects_, other->_impl_.ledger_objects_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLedgerDiffResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdiff_2eproto_getter, &descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdiff_2eproto_once,
      file_level_metadata_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdiff_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::GetLedgerDiffRequest*
Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::GetLedgerDiffRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::org::xrpl::rpc::v1::GetLedgerDiffRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::GetLedgerDiffResponse*
Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::GetLedgerDiffResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::org::xrpl::rpc::v1::GetLedgerDiffResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
