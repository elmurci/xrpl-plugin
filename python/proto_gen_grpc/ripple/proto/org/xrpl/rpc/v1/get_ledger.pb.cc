// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: org/xrpl/rpc/v1/get_ledger.proto

#include "org/xrpl/rpc/v1/get_ledger.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {
PROTOBUF_CONSTEXPR GetLedgerRequest::GetLedgerRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.client_ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ledger_)*/nullptr
  , /*decltype(_impl_.transactions_)*/false
  , /*decltype(_impl_.expand_)*/false
  , /*decltype(_impl_.get_objects_)*/false
  , /*decltype(_impl_.get_object_neighbors_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetLedgerRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetLedgerRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetLedgerRequestDefaultTypeInternal() {}
  union {
    GetLedgerRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetLedgerRequestDefaultTypeInternal _GetLedgerRequest_default_instance_;
PROTOBUF_CONSTEXPR GetLedgerResponse::GetLedgerResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.book_successors_)*/{}
  , /*decltype(_impl_.ledger_header_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ledger_objects_)*/nullptr
  , /*decltype(_impl_.validated_)*/false
  , /*decltype(_impl_.skiplist_included_)*/false
  , /*decltype(_impl_.is_unlimited_)*/false
  , /*decltype(_impl_.objects_included_)*/false
  , /*decltype(_impl_.object_neighbors_included_)*/false
  , /*decltype(_impl_.transactions_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct GetLedgerResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetLedgerResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetLedgerResponseDefaultTypeInternal() {}
  union {
    GetLedgerResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetLedgerResponseDefaultTypeInternal _GetLedgerResponse_default_instance_;
PROTOBUF_CONSTEXPR TransactionHashList::TransactionHashList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hashes_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TransactionHashListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransactionHashListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransactionHashListDefaultTypeInternal() {}
  union {
    TransactionHashList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransactionHashListDefaultTypeInternal _TransactionHashList_default_instance_;
PROTOBUF_CONSTEXPR TransactionAndMetadata::TransactionAndMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.transaction_blob_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.metadata_blob_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TransactionAndMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransactionAndMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransactionAndMetadataDefaultTypeInternal() {}
  union {
    TransactionAndMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransactionAndMetadataDefaultTypeInternal _TransactionAndMetadata_default_instance_;
PROTOBUF_CONSTEXPR TransactionAndMetadataList::TransactionAndMetadataList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.transactions_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TransactionAndMetadataListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransactionAndMetadataListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransactionAndMetadataListDefaultTypeInternal() {}
  union {
    TransactionAndMetadataList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransactionAndMetadataListDefaultTypeInternal _TransactionAndMetadataList_default_instance_;
}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org
static ::_pb::Metadata file_level_metadata_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto = nullptr;

const uint32_t TableStruct_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerRequest, _impl_.ledger_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerRequest, _impl_.transactions_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerRequest, _impl_.expand_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerRequest, _impl_.get_objects_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerRequest, _impl_.client_ip_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerRequest, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerRequest, _impl_.get_object_neighbors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerResponse, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerResponse, _impl_.ledger_header_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerResponse, _impl_.validated_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerResponse, _impl_.ledger_objects_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerResponse, _impl_.skiplist_included_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerResponse, _impl_.is_unlimited_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerResponse, _impl_.objects_included_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerResponse, _impl_.object_neighbors_included_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerResponse, _impl_.book_successors_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::GetLedgerResponse, _impl_.transactions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::TransactionHashList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::TransactionHashList, _impl_.hashes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::TransactionAndMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::TransactionAndMetadata, _impl_.transaction_blob_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::TransactionAndMetadata, _impl_.metadata_blob_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::TransactionAndMetadataList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::TransactionAndMetadataList, _impl_.transactions_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::org::xrpl::rpc::v1::GetLedgerRequest)},
  { 13, -1, -1, sizeof(::org::xrpl::rpc::v1::GetLedgerResponse)},
  { 30, -1, -1, sizeof(::org::xrpl::rpc::v1::TransactionHashList)},
  { 37, -1, -1, sizeof(::org::xrpl::rpc::v1::TransactionAndMetadata)},
  { 45, -1, -1, sizeof(::org::xrpl::rpc::v1::TransactionAndMetadataList)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::org::xrpl::rpc::v1::_GetLedgerRequest_default_instance_._instance,
  &::org::xrpl::rpc::v1::_GetLedgerResponse_default_instance_._instance,
  &::org::xrpl::rpc::v1::_TransactionHashList_default_instance_._instance,
  &::org::xrpl::rpc::v1::_TransactionAndMetadata_default_instance_._instance,
  &::org::xrpl::rpc::v1::_TransactionAndMetadataList_default_instance_._instance,
};

const char descriptor_table_protodef_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n org/xrpl/rpc/v1/get_ledger.proto\022\017org."
  "xrpl.rpc.v1\032\034org/xrpl/rpc/v1/ledger.prot"
  "o\"\276\001\n\020GetLedgerRequest\0220\n\006ledger\030\001 \001(\0132 "
  ".org.xrpl.rpc.v1.LedgerSpecifier\022\024\n\014tran"
  "sactions\030\002 \001(\010\022\016\n\006expand\030\003 \001(\010\022\023\n\013get_ob"
  "jects\030\004 \001(\010\022\021\n\tclient_ip\030\005 \001(\t\022\014\n\004user\030\006"
  " \001(\t\022\034\n\024get_object_neighbors\030\007 \001(\010\"\266\003\n\021G"
  "etLedgerResponse\022\025\n\rledger_header\030\001 \001(\014\022"
  ";\n\013hashes_list\030\002 \001(\0132$.org.xrpl.rpc.v1.T"
  "ransactionHashListH\000\022H\n\021transactions_lis"
  "t\030\003 \001(\0132+.org.xrpl.rpc.v1.TransactionAnd"
  "MetadataListH\000\022\021\n\tvalidated\030\004 \001(\010\0229\n\016led"
  "ger_objects\030\005 \001(\0132!.org.xrpl.rpc.v1.RawL"
  "edgerObjects\022\031\n\021skiplist_included\030\006 \001(\010\022"
  "\024\n\014is_unlimited\030\007 \001(\010\022\030\n\020objects_include"
  "d\030\010 \001(\010\022!\n\031object_neighbors_included\030\t \001"
  "(\010\0227\n\017book_successors\030\n \003(\0132\036.org.xrpl.r"
  "pc.v1.BookSuccessorB\016\n\014transactions\"%\n\023T"
  "ransactionHashList\022\016\n\006hashes\030\001 \003(\014\"I\n\026Tr"
  "ansactionAndMetadata\022\030\n\020transaction_blob"
  "\030\001 \001(\014\022\025\n\rmetadata_blob\030\002 \001(\014\"[\n\032Transac"
  "tionAndMetadataList\022=\n\014transactions\030\001 \003("
  "\0132\'.org.xrpl.rpc.v1.TransactionAndMetada"
  "taB\023\n\017org.xrpl.rpc.v1P\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto_deps[1] = {
  &::descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_2eproto,
};
static ::_pbi::once_flag descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto = {
    false, false, 951, descriptor_table_protodef_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto,
    "org/xrpl/rpc/v1/get_ledger.proto",
    &descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto_once, descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto_deps, 1, 5,
    schemas, file_default_instances, TableStruct_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto::offsets,
    file_level_metadata_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto, file_level_enum_descriptors_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto,
    file_level_service_descriptors_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto_getter() {
  return &descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto(&descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto);
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {

// ===================================================================

class GetLedgerRequest::_Internal {
 public:
  static const ::org::xrpl::rpc::v1::LedgerSpecifier& ledger(const GetLedgerRequest* msg);
};

const ::org::xrpl::rpc::v1::LedgerSpecifier&
GetLedgerRequest::_Internal::ledger(const GetLedgerRequest* msg) {
  return *msg->_impl_.ledger_;
}
void GetLedgerRequest::clear_ledger() {
  if (GetArenaForAllocation() == nullptr && _impl_.ledger_ != nullptr) {
    delete _impl_.ledger_;
  }
  _impl_.ledger_ = nullptr;
}
GetLedgerRequest::GetLedgerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:org.xrpl.rpc.v1.GetLedgerRequest)
}
GetLedgerRequest::GetLedgerRequest(const GetLedgerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetLedgerRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.client_ip_){}
    , decltype(_impl_.user_){}
    , decltype(_impl_.ledger_){nullptr}
    , decltype(_impl_.transactions_){}
    , decltype(_impl_.expand_){}
    , decltype(_impl_.get_objects_){}
    , decltype(_impl_.get_object_neighbors_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.client_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_ip().empty()) {
    _this->_impl_.client_ip_.Set(from._internal_client_ip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user().empty()) {
    _this->_impl_.user_.Set(from._internal_user(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_ledger()) {
    _this->_impl_.ledger_ = new ::org::xrpl::rpc::v1::LedgerSpecifier(*from._impl_.ledger_);
  }
  ::memcpy(&_impl_.transactions_, &from._impl_.transactions_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.get_object_neighbors_) -
    reinterpret_cast<char*>(&_impl_.transactions_)) + sizeof(_impl_.get_object_neighbors_));
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.GetLedgerRequest)
}

inline void GetLedgerRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.client_ip_){}
    , decltype(_impl_.user_){}
    , decltype(_impl_.ledger_){nullptr}
    , decltype(_impl_.transactions_){false}
    , decltype(_impl_.expand_){false}
    , decltype(_impl_.get_objects_){false}
    , decltype(_impl_.get_object_neighbors_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.client_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetLedgerRequest::~GetLedgerRequest() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.GetLedgerRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetLedgerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.client_ip_.Destroy();
  _impl_.user_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ledger_;
}

void GetLedgerRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetLedgerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.GetLedgerRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.client_ip_.ClearToEmpty();
  _impl_.user_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.ledger_ != nullptr) {
    delete _impl_.ledger_;
  }
  _impl_.ledger_ = nullptr;
  ::memset(&_impl_.transactions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.get_object_neighbors_) -
      reinterpret_cast<char*>(&_impl_.transactions_)) + sizeof(_impl_.get_object_neighbors_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLedgerRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.LedgerSpecifier ledger = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ledger(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool transactions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.transactions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool expand = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.expand_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool get_objects = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.get_objects_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string client_ip = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_client_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "org.xrpl.rpc.v1.GetLedgerRequest.client_ip"));
        } else
          goto handle_unusual;
        continue;
      // string user = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_user();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "org.xrpl.rpc.v1.GetLedgerRequest.user"));
        } else
          goto handle_unusual;
        continue;
      // bool get_object_neighbors = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.get_object_neighbors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetLedgerRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.GetLedgerRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.LedgerSpecifier ledger = 1;
  if (this->_internal_has_ledger()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ledger(this),
        _Internal::ledger(this).GetCachedSize(), target, stream);
  }

  // bool transactions = 2;
  if (this->_internal_transactions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_transactions(), target);
  }

  // bool expand = 3;
  if (this->_internal_expand() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_expand(), target);
  }

  // bool get_objects = 4;
  if (this->_internal_get_objects() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_get_objects(), target);
  }

  // string client_ip = 5;
  if (!this->_internal_client_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_ip().data(), static_cast<int>(this->_internal_client_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "org.xrpl.rpc.v1.GetLedgerRequest.client_ip");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_client_ip(), target);
  }

  // string user = 6;
  if (!this->_internal_user().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user().data(), static_cast<int>(this->_internal_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "org.xrpl.rpc.v1.GetLedgerRequest.user");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_user(), target);
  }

  // bool get_object_neighbors = 7;
  if (this->_internal_get_object_neighbors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_get_object_neighbors(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.GetLedgerRequest)
  return target;
}

size_t GetLedgerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.GetLedgerRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_ip = 5;
  if (!this->_internal_client_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_ip());
  }

  // string user = 6;
  if (!this->_internal_user().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user());
  }

  // .org.xrpl.rpc.v1.LedgerSpecifier ledger = 1;
  if (this->_internal_has_ledger()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ledger_);
  }

  // bool transactions = 2;
  if (this->_internal_transactions() != 0) {
    total_size += 1 + 1;
  }

  // bool expand = 3;
  if (this->_internal_expand() != 0) {
    total_size += 1 + 1;
  }

  // bool get_objects = 4;
  if (this->_internal_get_objects() != 0) {
    total_size += 1 + 1;
  }

  // bool get_object_neighbors = 7;
  if (this->_internal_get_object_neighbors() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetLedgerRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetLedgerRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetLedgerRequest::GetClassData() const { return &_class_data_; }


void GetLedgerRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetLedgerRequest*>(&to_msg);
  auto& from = static_cast<const GetLedgerRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.GetLedgerRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_client_ip().empty()) {
    _this->_internal_set_client_ip(from._internal_client_ip());
  }
  if (!from._internal_user().empty()) {
    _this->_internal_set_user(from._internal_user());
  }
  if (from._internal_has_ledger()) {
    _this->_internal_mutable_ledger()->::org::xrpl::rpc::v1::LedgerSpecifier::MergeFrom(
        from._internal_ledger());
  }
  if (from._internal_transactions() != 0) {
    _this->_internal_set_transactions(from._internal_transactions());
  }
  if (from._internal_expand() != 0) {
    _this->_internal_set_expand(from._internal_expand());
  }
  if (from._internal_get_objects() != 0) {
    _this->_internal_set_get_objects(from._internal_get_objects());
  }
  if (from._internal_get_object_neighbors() != 0) {
    _this->_internal_set_get_object_neighbors(from._internal_get_object_neighbors());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetLedgerRequest::CopyFrom(const GetLedgerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.GetLedgerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLedgerRequest::IsInitialized() const {
  return true;
}

void GetLedgerRequest::InternalSwap(GetLedgerRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.client_ip_, lhs_arena,
      &other->_impl_.client_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_, lhs_arena,
      &other->_impl_.user_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetLedgerRequest, _impl_.get_object_neighbors_)
      + sizeof(GetLedgerRequest::_impl_.get_object_neighbors_)
      - PROTOBUF_FIELD_OFFSET(GetLedgerRequest, _impl_.ledger_)>(
          reinterpret_cast<char*>(&_impl_.ledger_),
          reinterpret_cast<char*>(&other->_impl_.ledger_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLedgerRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto_getter, &descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto_once,
      file_level_metadata_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto[0]);
}

// ===================================================================

class GetLedgerResponse::_Internal {
 public:
  static const ::org::xrpl::rpc::v1::TransactionHashList& hashes_list(const GetLedgerResponse* msg);
  static const ::org::xrpl::rpc::v1::TransactionAndMetadataList& transactions_list(const GetLedgerResponse* msg);
  static const ::org::xrpl::rpc::v1::RawLedgerObjects& ledger_objects(const GetLedgerResponse* msg);
};

const ::org::xrpl::rpc::v1::TransactionHashList&
GetLedgerResponse::_Internal::hashes_list(const GetLedgerResponse* msg) {
  return *msg->_impl_.transactions_.hashes_list_;
}
const ::org::xrpl::rpc::v1::TransactionAndMetadataList&
GetLedgerResponse::_Internal::transactions_list(const GetLedgerResponse* msg) {
  return *msg->_impl_.transactions_.transactions_list_;
}
const ::org::xrpl::rpc::v1::RawLedgerObjects&
GetLedgerResponse::_Internal::ledger_objects(const GetLedgerResponse* msg) {
  return *msg->_impl_.ledger_objects_;
}
void GetLedgerResponse::set_allocated_hashes_list(::org::xrpl::rpc::v1::TransactionHashList* hashes_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_transactions();
  if (hashes_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(hashes_list);
    if (message_arena != submessage_arena) {
      hashes_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hashes_list, submessage_arena);
    }
    set_has_hashes_list();
    _impl_.transactions_.hashes_list_ = hashes_list;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.GetLedgerResponse.hashes_list)
}
void GetLedgerResponse::set_allocated_transactions_list(::org::xrpl::rpc::v1::TransactionAndMetadataList* transactions_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_transactions();
  if (transactions_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(transactions_list);
    if (message_arena != submessage_arena) {
      transactions_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transactions_list, submessage_arena);
    }
    set_has_transactions_list();
    _impl_.transactions_.transactions_list_ = transactions_list;
  }
  // @@protoc_insertion_point(field_set_allocated:org.xrpl.rpc.v1.GetLedgerResponse.transactions_list)
}
void GetLedgerResponse::clear_ledger_objects() {
  if (GetArenaForAllocation() == nullptr && _impl_.ledger_objects_ != nullptr) {
    delete _impl_.ledger_objects_;
  }
  _impl_.ledger_objects_ = nullptr;
}
void GetLedgerResponse::clear_book_successors() {
  _impl_.book_successors_.Clear();
}
GetLedgerResponse::GetLedgerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:org.xrpl.rpc.v1.GetLedgerResponse)
}
GetLedgerResponse::GetLedgerResponse(const GetLedgerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetLedgerResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.book_successors_){from._impl_.book_successors_}
    , decltype(_impl_.ledger_header_){}
    , decltype(_impl_.ledger_objects_){nullptr}
    , decltype(_impl_.validated_){}
    , decltype(_impl_.skiplist_included_){}
    , decltype(_impl_.is_unlimited_){}
    , decltype(_impl_.objects_included_){}
    , decltype(_impl_.object_neighbors_included_){}
    , decltype(_impl_.transactions_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ledger_header_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ledger_header_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ledger_header().empty()) {
    _this->_impl_.ledger_header_.Set(from._internal_ledger_header(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_ledger_objects()) {
    _this->_impl_.ledger_objects_ = new ::org::xrpl::rpc::v1::RawLedgerObjects(*from._impl_.ledger_objects_);
  }
  ::memcpy(&_impl_.validated_, &from._impl_.validated_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.object_neighbors_included_) -
    reinterpret_cast<char*>(&_impl_.validated_)) + sizeof(_impl_.object_neighbors_included_));
  clear_has_transactions();
  switch (from.transactions_case()) {
    case kHashesList: {
      _this->_internal_mutable_hashes_list()->::org::xrpl::rpc::v1::TransactionHashList::MergeFrom(
          from._internal_hashes_list());
      break;
    }
    case kTransactionsList: {
      _this->_internal_mutable_transactions_list()->::org::xrpl::rpc::v1::TransactionAndMetadataList::MergeFrom(
          from._internal_transactions_list());
      break;
    }
    case TRANSACTIONS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.GetLedgerResponse)
}

inline void GetLedgerResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.book_successors_){arena}
    , decltype(_impl_.ledger_header_){}
    , decltype(_impl_.ledger_objects_){nullptr}
    , decltype(_impl_.validated_){false}
    , decltype(_impl_.skiplist_included_){false}
    , decltype(_impl_.is_unlimited_){false}
    , decltype(_impl_.objects_included_){false}
    , decltype(_impl_.object_neighbors_included_){false}
    , decltype(_impl_.transactions_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.ledger_header_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ledger_header_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_transactions();
}

GetLedgerResponse::~GetLedgerResponse() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.GetLedgerResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetLedgerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.book_successors_.~RepeatedPtrField();
  _impl_.ledger_header_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ledger_objects_;
  if (has_transactions()) {
    clear_transactions();
  }
}

void GetLedgerResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetLedgerResponse::clear_transactions() {
// @@protoc_insertion_point(one_of_clear_start:org.xrpl.rpc.v1.GetLedgerResponse)
  switch (transactions_case()) {
    case kHashesList: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.transactions_.hashes_list_;
      }
      break;
    }
    case kTransactionsList: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.transactions_.transactions_list_;
      }
      break;
    }
    case TRANSACTIONS_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TRANSACTIONS_NOT_SET;
}


void GetLedgerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.GetLedgerResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.book_successors_.Clear();
  _impl_.ledger_header_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.ledger_objects_ != nullptr) {
    delete _impl_.ledger_objects_;
  }
  _impl_.ledger_objects_ = nullptr;
  ::memset(&_impl_.validated_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.object_neighbors_included_) -
      reinterpret_cast<char*>(&_impl_.validated_)) + sizeof(_impl_.object_neighbors_included_));
  clear_transactions();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLedgerResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes ledger_header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ledger_header();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.TransactionHashList hashes_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_hashes_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.TransactionAndMetadataList transactions_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_transactions_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool validated = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.validated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.RawLedgerObjects ledger_objects = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ledger_objects(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool skiplist_included = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.skiplist_included_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_unlimited = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.is_unlimited_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool objects_included = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.objects_included_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool object_neighbors_included = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.object_neighbors_included_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .org.xrpl.rpc.v1.BookSuccessor book_successors = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_book_successors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetLedgerResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.GetLedgerResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes ledger_header = 1;
  if (!this->_internal_ledger_header().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_ledger_header(), target);
  }

  // .org.xrpl.rpc.v1.TransactionHashList hashes_list = 2;
  if (_internal_has_hashes_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::hashes_list(this),
        _Internal::hashes_list(this).GetCachedSize(), target, stream);
  }

  // .org.xrpl.rpc.v1.TransactionAndMetadataList transactions_list = 3;
  if (_internal_has_transactions_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::transactions_list(this),
        _Internal::transactions_list(this).GetCachedSize(), target, stream);
  }

  // bool validated = 4;
  if (this->_internal_validated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_validated(), target);
  }

  // .org.xrpl.rpc.v1.RawLedgerObjects ledger_objects = 5;
  if (this->_internal_has_ledger_objects()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::ledger_objects(this),
        _Internal::ledger_objects(this).GetCachedSize(), target, stream);
  }

  // bool skiplist_included = 6;
  if (this->_internal_skiplist_included() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_skiplist_included(), target);
  }

  // bool is_unlimited = 7;
  if (this->_internal_is_unlimited() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_unlimited(), target);
  }

  // bool objects_included = 8;
  if (this->_internal_objects_included() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_objects_included(), target);
  }

  // bool object_neighbors_included = 9;
  if (this->_internal_object_neighbors_included() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_object_neighbors_included(), target);
  }

  // repeated .org.xrpl.rpc.v1.BookSuccessor book_successors = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_book_successors_size()); i < n; i++) {
    const auto& repfield = this->_internal_book_successors(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.GetLedgerResponse)
  return target;
}

size_t GetLedgerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.GetLedgerResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .org.xrpl.rpc.v1.BookSuccessor book_successors = 10;
  total_size += 1UL * this->_internal_book_successors_size();
  for (const auto& msg : this->_impl_.book_successors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes ledger_header = 1;
  if (!this->_internal_ledger_header().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ledger_header());
  }

  // .org.xrpl.rpc.v1.RawLedgerObjects ledger_objects = 5;
  if (this->_internal_has_ledger_objects()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ledger_objects_);
  }

  // bool validated = 4;
  if (this->_internal_validated() != 0) {
    total_size += 1 + 1;
  }

  // bool skiplist_included = 6;
  if (this->_internal_skiplist_included() != 0) {
    total_size += 1 + 1;
  }

  // bool is_unlimited = 7;
  if (this->_internal_is_unlimited() != 0) {
    total_size += 1 + 1;
  }

  // bool objects_included = 8;
  if (this->_internal_objects_included() != 0) {
    total_size += 1 + 1;
  }

  // bool object_neighbors_included = 9;
  if (this->_internal_object_neighbors_included() != 0) {
    total_size += 1 + 1;
  }

  switch (transactions_case()) {
    // .org.xrpl.rpc.v1.TransactionHashList hashes_list = 2;
    case kHashesList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.transactions_.hashes_list_);
      break;
    }
    // .org.xrpl.rpc.v1.TransactionAndMetadataList transactions_list = 3;
    case kTransactionsList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.transactions_.transactions_list_);
      break;
    }
    case TRANSACTIONS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetLedgerResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetLedgerResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetLedgerResponse::GetClassData() const { return &_class_data_; }


void GetLedgerResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetLedgerResponse*>(&to_msg);
  auto& from = static_cast<const GetLedgerResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.GetLedgerResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.book_successors_.MergeFrom(from._impl_.book_successors_);
  if (!from._internal_ledger_header().empty()) {
    _this->_internal_set_ledger_header(from._internal_ledger_header());
  }
  if (from._internal_has_ledger_objects()) {
    _this->_internal_mutable_ledger_objects()->::org::xrpl::rpc::v1::RawLedgerObjects::MergeFrom(
        from._internal_ledger_objects());
  }
  if (from._internal_validated() != 0) {
    _this->_internal_set_validated(from._internal_validated());
  }
  if (from._internal_skiplist_included() != 0) {
    _this->_internal_set_skiplist_included(from._internal_skiplist_included());
  }
  if (from._internal_is_unlimited() != 0) {
    _this->_internal_set_is_unlimited(from._internal_is_unlimited());
  }
  if (from._internal_objects_included() != 0) {
    _this->_internal_set_objects_included(from._internal_objects_included());
  }
  if (from._internal_object_neighbors_included() != 0) {
    _this->_internal_set_object_neighbors_included(from._internal_object_neighbors_included());
  }
  switch (from.transactions_case()) {
    case kHashesList: {
      _this->_internal_mutable_hashes_list()->::org::xrpl::rpc::v1::TransactionHashList::MergeFrom(
          from._internal_hashes_list());
      break;
    }
    case kTransactionsList: {
      _this->_internal_mutable_transactions_list()->::org::xrpl::rpc::v1::TransactionAndMetadataList::MergeFrom(
          from._internal_transactions_list());
      break;
    }
    case TRANSACTIONS_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetLedgerResponse::CopyFrom(const GetLedgerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.GetLedgerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLedgerResponse::IsInitialized() const {
  return true;
}

void GetLedgerResponse::InternalSwap(GetLedgerResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.book_successors_.InternalSwap(&other->_impl_.book_successors_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ledger_header_, lhs_arena,
      &other->_impl_.ledger_header_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetLedgerResponse, _impl_.object_neighbors_included_)
      + sizeof(GetLedgerResponse::_impl_.object_neighbors_included_)
      - PROTOBUF_FIELD_OFFSET(GetLedgerResponse, _impl_.ledger_objects_)>(
          reinterpret_cast<char*>(&_impl_.ledger_objects_),
          reinterpret_cast<char*>(&other->_impl_.ledger_objects_));
  swap(_impl_.transactions_, other->_impl_.transactions_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLedgerResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto_getter, &descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto_once,
      file_level_metadata_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto[1]);
}

// ===================================================================

class TransactionHashList::_Internal {
 public:
};

TransactionHashList::TransactionHashList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:org.xrpl.rpc.v1.TransactionHashList)
}
TransactionHashList::TransactionHashList(const TransactionHashList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransactionHashList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hashes_){from._impl_.hashes_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.TransactionHashList)
}

inline void TransactionHashList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hashes_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TransactionHashList::~TransactionHashList() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.TransactionHashList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransactionHashList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hashes_.~RepeatedPtrField();
}

void TransactionHashList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransactionHashList::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.TransactionHashList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hashes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionHashList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes hashes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_hashes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransactionHashList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.TransactionHashList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes hashes = 1;
  for (int i = 0, n = this->_internal_hashes_size(); i < n; i++) {
    const auto& s = this->_internal_hashes(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.TransactionHashList)
  return target;
}

size_t TransactionHashList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.TransactionHashList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes hashes = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.hashes_.size());
  for (int i = 0, n = _impl_.hashes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.hashes_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionHashList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransactionHashList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionHashList::GetClassData() const { return &_class_data_; }


void TransactionHashList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransactionHashList*>(&to_msg);
  auto& from = static_cast<const TransactionHashList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.TransactionHashList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.hashes_.MergeFrom(from._impl_.hashes_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionHashList::CopyFrom(const TransactionHashList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.TransactionHashList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionHashList::IsInitialized() const {
  return true;
}

void TransactionHashList::InternalSwap(TransactionHashList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.hashes_.InternalSwap(&other->_impl_.hashes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionHashList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto_getter, &descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto_once,
      file_level_metadata_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto[2]);
}

// ===================================================================

class TransactionAndMetadata::_Internal {
 public:
};

TransactionAndMetadata::TransactionAndMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:org.xrpl.rpc.v1.TransactionAndMetadata)
}
TransactionAndMetadata::TransactionAndMetadata(const TransactionAndMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransactionAndMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.transaction_blob_){}
    , decltype(_impl_.metadata_blob_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.transaction_blob_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.transaction_blob_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_transaction_blob().empty()) {
    _this->_impl_.transaction_blob_.Set(from._internal_transaction_blob(), 
      _this->GetArenaForAllocation());
  }
  _impl_.metadata_blob_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_blob_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metadata_blob().empty()) {
    _this->_impl_.metadata_blob_.Set(from._internal_metadata_blob(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.TransactionAndMetadata)
}

inline void TransactionAndMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.transaction_blob_){}
    , decltype(_impl_.metadata_blob_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.transaction_blob_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.transaction_blob_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.metadata_blob_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_blob_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TransactionAndMetadata::~TransactionAndMetadata() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.TransactionAndMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransactionAndMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.transaction_blob_.Destroy();
  _impl_.metadata_blob_.Destroy();
}

void TransactionAndMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransactionAndMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.TransactionAndMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.transaction_blob_.ClearToEmpty();
  _impl_.metadata_blob_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionAndMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes transaction_blob = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_transaction_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes metadata_blob = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_metadata_blob();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransactionAndMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.TransactionAndMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes transaction_blob = 1;
  if (!this->_internal_transaction_blob().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_transaction_blob(), target);
  }

  // bytes metadata_blob = 2;
  if (!this->_internal_metadata_blob().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_metadata_blob(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.TransactionAndMetadata)
  return target;
}

size_t TransactionAndMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.TransactionAndMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes transaction_blob = 1;
  if (!this->_internal_transaction_blob().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transaction_blob());
  }

  // bytes metadata_blob = 2;
  if (!this->_internal_metadata_blob().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_metadata_blob());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionAndMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransactionAndMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionAndMetadata::GetClassData() const { return &_class_data_; }


void TransactionAndMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransactionAndMetadata*>(&to_msg);
  auto& from = static_cast<const TransactionAndMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.TransactionAndMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_transaction_blob().empty()) {
    _this->_internal_set_transaction_blob(from._internal_transaction_blob());
  }
  if (!from._internal_metadata_blob().empty()) {
    _this->_internal_set_metadata_blob(from._internal_metadata_blob());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionAndMetadata::CopyFrom(const TransactionAndMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.TransactionAndMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionAndMetadata::IsInitialized() const {
  return true;
}

void TransactionAndMetadata::InternalSwap(TransactionAndMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.transaction_blob_, lhs_arena,
      &other->_impl_.transaction_blob_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.metadata_blob_, lhs_arena,
      &other->_impl_.metadata_blob_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionAndMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto_getter, &descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto_once,
      file_level_metadata_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto[3]);
}

// ===================================================================

class TransactionAndMetadataList::_Internal {
 public:
};

TransactionAndMetadataList::TransactionAndMetadataList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:org.xrpl.rpc.v1.TransactionAndMetadataList)
}
TransactionAndMetadataList::TransactionAndMetadataList(const TransactionAndMetadataList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransactionAndMetadataList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.transactions_){from._impl_.transactions_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.TransactionAndMetadataList)
}

inline void TransactionAndMetadataList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.transactions_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TransactionAndMetadataList::~TransactionAndMetadataList() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.TransactionAndMetadataList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransactionAndMetadataList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.transactions_.~RepeatedPtrField();
}

void TransactionAndMetadataList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransactionAndMetadataList::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.TransactionAndMetadataList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.transactions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionAndMetadataList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .org.xrpl.rpc.v1.TransactionAndMetadata transactions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransactionAndMetadataList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.TransactionAndMetadataList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .org.xrpl.rpc.v1.TransactionAndMetadata transactions = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_transactions_size()); i < n; i++) {
    const auto& repfield = this->_internal_transactions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.TransactionAndMetadataList)
  return target;
}

size_t TransactionAndMetadataList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.TransactionAndMetadataList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .org.xrpl.rpc.v1.TransactionAndMetadata transactions = 1;
  total_size += 1UL * this->_internal_transactions_size();
  for (const auto& msg : this->_impl_.transactions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionAndMetadataList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransactionAndMetadataList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionAndMetadataList::GetClassData() const { return &_class_data_; }


void TransactionAndMetadataList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransactionAndMetadataList*>(&to_msg);
  auto& from = static_cast<const TransactionAndMetadataList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.TransactionAndMetadataList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.transactions_.MergeFrom(from._impl_.transactions_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionAndMetadataList::CopyFrom(const TransactionAndMetadataList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.TransactionAndMetadataList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionAndMetadataList::IsInitialized() const {
  return true;
}

void TransactionAndMetadataList::InternalSwap(TransactionAndMetadataList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.transactions_.InternalSwap(&other->_impl_.transactions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionAndMetadataList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto_getter, &descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto_once,
      file_level_metadata_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::GetLedgerRequest*
Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::GetLedgerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::org::xrpl::rpc::v1::GetLedgerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::GetLedgerResponse*
Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::GetLedgerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::org::xrpl::rpc::v1::GetLedgerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::TransactionHashList*
Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::TransactionHashList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::org::xrpl::rpc::v1::TransactionHashList >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::TransactionAndMetadata*
Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::TransactionAndMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::org::xrpl::rpc::v1::TransactionAndMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::TransactionAndMetadataList*
Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::TransactionAndMetadataList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::org::xrpl::rpc::v1::TransactionAndMetadataList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
