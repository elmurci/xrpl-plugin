// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: org/xrpl/rpc/v1/xrp_ledger.proto

#include "org/xrpl/rpc/v1/xrp_ledger.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {
}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_org_2fxrpl_2frpc_2fv1_2fxrp_5fledger_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_org_2fxrpl_2frpc_2fv1_2fxrp_5fledger_2eproto = nullptr;
const uint32_t TableStruct_org_2fxrpl_2frpc_2fv1_2fxrp_5fledger_2eproto::offsets[1] = {};
static constexpr ::_pbi::MigrationSchema* schemas = nullptr;
static constexpr ::_pb::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_org_2fxrpl_2frpc_2fv1_2fxrp_5fledger_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n org/xrpl/rpc/v1/xrp_ledger.proto\022\017org."
  "xrpl.rpc.v1\032 org/xrpl/rpc/v1/get_ledger."
  "proto\032&org/xrpl/rpc/v1/get_ledger_entry."
  "proto\032%org/xrpl/rpc/v1/get_ledger_data.p"
  "roto\032%org/xrpl/rpc/v1/get_ledger_diff.pr"
  "oto2\214\003\n\023XRPLedgerAPIService\022R\n\tGetLedger"
  "\022!.org.xrpl.rpc.v1.GetLedgerRequest\032\".or"
  "g.xrpl.rpc.v1.GetLedgerResponse\022a\n\016GetLe"
  "dgerEntry\022&.org.xrpl.rpc.v1.GetLedgerEnt"
  "ryRequest\032\'.org.xrpl.rpc.v1.GetLedgerEnt"
  "ryResponse\022^\n\rGetLedgerData\022%.org.xrpl.r"
  "pc.v1.GetLedgerDataRequest\032&.org.xrpl.rp"
  "c.v1.GetLedgerDataResponse\022^\n\rGetLedgerD"
  "iff\022%.org.xrpl.rpc.v1.GetLedgerDiffReque"
  "st\032&.org.xrpl.rpc.v1.GetLedgerDiffRespon"
  "seB\023\n\017org.xrpl.rpc.v1P\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_org_2fxrpl_2frpc_2fv1_2fxrp_5fledger_2eproto_deps[4] = {
  &::descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_2eproto,
  &::descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdata_2eproto,
  &::descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fdiff_2eproto,
  &::descriptor_table_org_2fxrpl_2frpc_2fv1_2fget_5fledger_5fentry_2eproto,
};
static ::_pbi::once_flag descriptor_table_org_2fxrpl_2frpc_2fv1_2fxrp_5fledger_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_org_2fxrpl_2frpc_2fv1_2fxrp_5fledger_2eproto = {
    false, false, 631, descriptor_table_protodef_org_2fxrpl_2frpc_2fv1_2fxrp_5fledger_2eproto,
    "org/xrpl/rpc/v1/xrp_ledger.proto",
    &descriptor_table_org_2fxrpl_2frpc_2fv1_2fxrp_5fledger_2eproto_once, descriptor_table_org_2fxrpl_2frpc_2fv1_2fxrp_5fledger_2eproto_deps, 4, 0,
    schemas, file_default_instances, TableStruct_org_2fxrpl_2frpc_2fv1_2fxrp_5fledger_2eproto::offsets,
    nullptr, file_level_enum_descriptors_org_2fxrpl_2frpc_2fv1_2fxrp_5fledger_2eproto,
    file_level_service_descriptors_org_2fxrpl_2frpc_2fv1_2fxrp_5fledger_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_org_2fxrpl_2frpc_2fv1_2fxrp_5fledger_2eproto_getter() {
  return &descriptor_table_org_2fxrpl_2frpc_2fv1_2fxrp_5fledger_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_org_2fxrpl_2frpc_2fv1_2fxrp_5fledger_2eproto(&descriptor_table_org_2fxrpl_2frpc_2fv1_2fxrp_5fledger_2eproto);
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
