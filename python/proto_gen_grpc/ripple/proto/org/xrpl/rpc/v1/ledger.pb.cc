// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: org/xrpl/rpc/v1/ledger.proto

#include "org/xrpl/rpc/v1/ledger.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {
PROTOBUF_CONSTEXPR LedgerSpecifier::LedgerSpecifier(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ledger_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct LedgerSpecifierDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LedgerSpecifierDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LedgerSpecifierDefaultTypeInternal() {}
  union {
    LedgerSpecifier _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LedgerSpecifierDefaultTypeInternal _LedgerSpecifier_default_instance_;
PROTOBUF_CONSTEXPR RawLedgerObject::RawLedgerObject(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.predecessor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.successor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mod_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RawLedgerObjectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RawLedgerObjectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RawLedgerObjectDefaultTypeInternal() {}
  union {
    RawLedgerObject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RawLedgerObjectDefaultTypeInternal _RawLedgerObject_default_instance_;
PROTOBUF_CONSTEXPR RawLedgerObjects::RawLedgerObjects(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.objects_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RawLedgerObjectsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RawLedgerObjectsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RawLedgerObjectsDefaultTypeInternal() {}
  union {
    RawLedgerObjects _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RawLedgerObjectsDefaultTypeInternal _RawLedgerObjects_default_instance_;
PROTOBUF_CONSTEXPR BookSuccessor::BookSuccessor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.book_base_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.first_book_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BookSuccessorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BookSuccessorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BookSuccessorDefaultTypeInternal() {}
  union {
    BookSuccessor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BookSuccessorDefaultTypeInternal _BookSuccessor_default_instance_;
}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org
static ::_pb::Metadata file_level_metadata_org_2fxrpl_2frpc_2fv1_2fledger_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_org_2fxrpl_2frpc_2fv1_2fledger_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_org_2fxrpl_2frpc_2fv1_2fledger_2eproto = nullptr;

const uint32_t TableStruct_org_2fxrpl_2frpc_2fv1_2fledger_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::LedgerSpecifier, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::LedgerSpecifier, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::LedgerSpecifier, _impl_.ledger_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::RawLedgerObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::RawLedgerObject, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::RawLedgerObject, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::RawLedgerObject, _impl_.mod_type_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::RawLedgerObject, _impl_.predecessor_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::RawLedgerObject, _impl_.successor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::RawLedgerObjects, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::RawLedgerObjects, _impl_.objects_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::BookSuccessor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::BookSuccessor, _impl_.book_base_),
  PROTOBUF_FIELD_OFFSET(::org::xrpl::rpc::v1::BookSuccessor, _impl_.first_book_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::org::xrpl::rpc::v1::LedgerSpecifier)},
  { 10, -1, -1, sizeof(::org::xrpl::rpc::v1::RawLedgerObject)},
  { 21, -1, -1, sizeof(::org::xrpl::rpc::v1::RawLedgerObjects)},
  { 28, -1, -1, sizeof(::org::xrpl::rpc::v1::BookSuccessor)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::org::xrpl::rpc::v1::_LedgerSpecifier_default_instance_._instance,
  &::org::xrpl::rpc::v1::_RawLedgerObject_default_instance_._instance,
  &::org::xrpl::rpc::v1::_RawLedgerObjects_default_instance_._instance,
  &::org::xrpl::rpc::v1::_BookSuccessor_default_instance_._instance,
};

const char descriptor_table_protodef_org_2fxrpl_2frpc_2fv1_2fledger_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034org/xrpl/rpc/v1/ledger.proto\022\017org.xrpl"
  ".rpc.v1\"\347\001\n\017LedgerSpecifier\022=\n\010shortcut\030"
  "\001 \001(\0162).org.xrpl.rpc.v1.LedgerSpecifier."
  "ShortcutH\000\022\022\n\010sequence\030\002 \001(\rH\000\022\016\n\004hash\030\003"
  " \001(\014H\000\"g\n\010Shortcut\022\030\n\024SHORTCUT_UNSPECIFI"
  "ED\020\000\022\026\n\022SHORTCUT_VALIDATED\020\001\022\023\n\017SHORTCUT"
  "_CLOSED\020\002\022\024\n\020SHORTCUT_CURRENT\020\003B\010\n\006ledge"
  "r\"\346\001\n\017RawLedgerObject\022\014\n\004data\030\001 \001(\014\022\013\n\003k"
  "ey\030\002 \001(\014\022C\n\010mod_type\030\003 \001(\01621.org.xrpl.rp"
  "c.v1.RawLedgerObject.ModificationType\022\023\n"
  "\013predecessor\030\004 \001(\014\022\021\n\tsuccessor\030\005 \001(\014\"K\n"
  "\020ModificationType\022\017\n\013UNSPECIFIED\020\000\022\013\n\007CR"
  "EATED\020\001\022\014\n\010MODIFIED\020\002\022\013\n\007DELETED\020\003\"E\n\020Ra"
  "wLedgerObjects\0221\n\007objects\030\001 \003(\0132 .org.xr"
  "pl.rpc.v1.RawLedgerObject\"6\n\rBookSuccess"
  "or\022\021\n\tbook_base\030\001 \001(\014\022\022\n\nfirst_book\030\002 \001("
  "\014B\023\n\017org.xrpl.rpc.v1P\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_2eproto = {
    false, false, 670, descriptor_table_protodef_org_2fxrpl_2frpc_2fv1_2fledger_2eproto,
    "org/xrpl/rpc/v1/ledger.proto",
    &descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_org_2fxrpl_2frpc_2fv1_2fledger_2eproto::offsets,
    file_level_metadata_org_2fxrpl_2frpc_2fv1_2fledger_2eproto, file_level_enum_descriptors_org_2fxrpl_2frpc_2fv1_2fledger_2eproto,
    file_level_service_descriptors_org_2fxrpl_2frpc_2fv1_2fledger_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_2eproto_getter() {
  return &descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_org_2fxrpl_2frpc_2fv1_2fledger_2eproto(&descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_2eproto);
namespace org {
namespace xrpl {
namespace rpc {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LedgerSpecifier_Shortcut_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_2eproto);
  return file_level_enum_descriptors_org_2fxrpl_2frpc_2fv1_2fledger_2eproto[0];
}
bool LedgerSpecifier_Shortcut_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr LedgerSpecifier_Shortcut LedgerSpecifier::SHORTCUT_UNSPECIFIED;
constexpr LedgerSpecifier_Shortcut LedgerSpecifier::SHORTCUT_VALIDATED;
constexpr LedgerSpecifier_Shortcut LedgerSpecifier::SHORTCUT_CLOSED;
constexpr LedgerSpecifier_Shortcut LedgerSpecifier::SHORTCUT_CURRENT;
constexpr LedgerSpecifier_Shortcut LedgerSpecifier::Shortcut_MIN;
constexpr LedgerSpecifier_Shortcut LedgerSpecifier::Shortcut_MAX;
constexpr int LedgerSpecifier::Shortcut_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RawLedgerObject_ModificationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_2eproto);
  return file_level_enum_descriptors_org_2fxrpl_2frpc_2fv1_2fledger_2eproto[1];
}
bool RawLedgerObject_ModificationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RawLedgerObject_ModificationType RawLedgerObject::UNSPECIFIED;
constexpr RawLedgerObject_ModificationType RawLedgerObject::CREATED;
constexpr RawLedgerObject_ModificationType RawLedgerObject::MODIFIED;
constexpr RawLedgerObject_ModificationType RawLedgerObject::DELETED;
constexpr RawLedgerObject_ModificationType RawLedgerObject::ModificationType_MIN;
constexpr RawLedgerObject_ModificationType RawLedgerObject::ModificationType_MAX;
constexpr int RawLedgerObject::ModificationType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class LedgerSpecifier::_Internal {
 public:
};

LedgerSpecifier::LedgerSpecifier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:org.xrpl.rpc.v1.LedgerSpecifier)
}
LedgerSpecifier::LedgerSpecifier(const LedgerSpecifier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LedgerSpecifier* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ledger_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_ledger();
  switch (from.ledger_case()) {
    case kShortcut: {
      _this->_internal_set_shortcut(from._internal_shortcut());
      break;
    }
    case kSequence: {
      _this->_internal_set_sequence(from._internal_sequence());
      break;
    }
    case kHash: {
      _this->_internal_set_hash(from._internal_hash());
      break;
    }
    case LEDGER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.LedgerSpecifier)
}

inline void LedgerSpecifier::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ledger_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_ledger();
}

LedgerSpecifier::~LedgerSpecifier() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.LedgerSpecifier)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LedgerSpecifier::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_ledger()) {
    clear_ledger();
  }
}

void LedgerSpecifier::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LedgerSpecifier::clear_ledger() {
// @@protoc_insertion_point(one_of_clear_start:org.xrpl.rpc.v1.LedgerSpecifier)
  switch (ledger_case()) {
    case kShortcut: {
      // No need to clear
      break;
    }
    case kSequence: {
      // No need to clear
      break;
    }
    case kHash: {
      _impl_.ledger_.hash_.Destroy();
      break;
    }
    case LEDGER_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = LEDGER_NOT_SET;
}


void LedgerSpecifier::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.LedgerSpecifier)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_ledger();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LedgerSpecifier::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .org.xrpl.rpc.v1.LedgerSpecifier.Shortcut shortcut = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_shortcut(static_cast<::org::xrpl::rpc::v1::LedgerSpecifier_Shortcut>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 sequence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_sequence(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LedgerSpecifier::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.LedgerSpecifier)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .org.xrpl.rpc.v1.LedgerSpecifier.Shortcut shortcut = 1;
  if (_internal_has_shortcut()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_shortcut(), target);
  }

  // uint32 sequence = 2;
  if (_internal_has_sequence()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sequence(), target);
  }

  // bytes hash = 3;
  if (_internal_has_hash()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.LedgerSpecifier)
  return target;
}

size_t LedgerSpecifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.LedgerSpecifier)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (ledger_case()) {
    // .org.xrpl.rpc.v1.LedgerSpecifier.Shortcut shortcut = 1;
    case kShortcut: {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_shortcut());
      break;
    }
    // uint32 sequence = 2;
    case kSequence: {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sequence());
      break;
    }
    // bytes hash = 3;
    case kHash: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_hash());
      break;
    }
    case LEDGER_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LedgerSpecifier::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LedgerSpecifier::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LedgerSpecifier::GetClassData() const { return &_class_data_; }


void LedgerSpecifier::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LedgerSpecifier*>(&to_msg);
  auto& from = static_cast<const LedgerSpecifier&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.LedgerSpecifier)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.ledger_case()) {
    case kShortcut: {
      _this->_internal_set_shortcut(from._internal_shortcut());
      break;
    }
    case kSequence: {
      _this->_internal_set_sequence(from._internal_sequence());
      break;
    }
    case kHash: {
      _this->_internal_set_hash(from._internal_hash());
      break;
    }
    case LEDGER_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LedgerSpecifier::CopyFrom(const LedgerSpecifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.LedgerSpecifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LedgerSpecifier::IsInitialized() const {
  return true;
}

void LedgerSpecifier::InternalSwap(LedgerSpecifier* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.ledger_, other->_impl_.ledger_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LedgerSpecifier::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_2eproto_getter, &descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_2eproto_once,
      file_level_metadata_org_2fxrpl_2frpc_2fv1_2fledger_2eproto[0]);
}

// ===================================================================

class RawLedgerObject::_Internal {
 public:
};

RawLedgerObject::RawLedgerObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:org.xrpl.rpc.v1.RawLedgerObject)
}
RawLedgerObject::RawLedgerObject(const RawLedgerObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RawLedgerObject* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.key_){}
    , decltype(_impl_.predecessor_){}
    , decltype(_impl_.successor_){}
    , decltype(_impl_.mod_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.predecessor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.predecessor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_predecessor().empty()) {
    _this->_impl_.predecessor_.Set(from._internal_predecessor(), 
      _this->GetArenaForAllocation());
  }
  _impl_.successor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.successor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_successor().empty()) {
    _this->_impl_.successor_.Set(from._internal_successor(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.mod_type_ = from._impl_.mod_type_;
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.RawLedgerObject)
}

inline void RawLedgerObject::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.key_){}
    , decltype(_impl_.predecessor_){}
    , decltype(_impl_.successor_){}
    , decltype(_impl_.mod_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.predecessor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.predecessor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.successor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.successor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RawLedgerObject::~RawLedgerObject() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.RawLedgerObject)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RawLedgerObject::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
  _impl_.key_.Destroy();
  _impl_.predecessor_.Destroy();
  _impl_.successor_.Destroy();
}

void RawLedgerObject::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RawLedgerObject::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.RawLedgerObject)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _impl_.key_.ClearToEmpty();
  _impl_.predecessor_.ClearToEmpty();
  _impl_.successor_.ClearToEmpty();
  _impl_.mod_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RawLedgerObject::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .org.xrpl.rpc.v1.RawLedgerObject.ModificationType mod_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mod_type(static_cast<::org::xrpl::rpc::v1::RawLedgerObject_ModificationType>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes predecessor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_predecessor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes successor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_successor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RawLedgerObject::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.RawLedgerObject)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // bytes key = 2;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key(), target);
  }

  // .org.xrpl.rpc.v1.RawLedgerObject.ModificationType mod_type = 3;
  if (this->_internal_mod_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_mod_type(), target);
  }

  // bytes predecessor = 4;
  if (!this->_internal_predecessor().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_predecessor(), target);
  }

  // bytes successor = 5;
  if (!this->_internal_successor().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_successor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.RawLedgerObject)
  return target;
}

size_t RawLedgerObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.RawLedgerObject)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // bytes key = 2;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes predecessor = 4;
  if (!this->_internal_predecessor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_predecessor());
  }

  // bytes successor = 5;
  if (!this->_internal_successor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_successor());
  }

  // .org.xrpl.rpc.v1.RawLedgerObject.ModificationType mod_type = 3;
  if (this->_internal_mod_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_mod_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RawLedgerObject::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RawLedgerObject::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RawLedgerObject::GetClassData() const { return &_class_data_; }


void RawLedgerObject::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RawLedgerObject*>(&to_msg);
  auto& from = static_cast<const RawLedgerObject&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.RawLedgerObject)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_predecessor().empty()) {
    _this->_internal_set_predecessor(from._internal_predecessor());
  }
  if (!from._internal_successor().empty()) {
    _this->_internal_set_successor(from._internal_successor());
  }
  if (from._internal_mod_type() != 0) {
    _this->_internal_set_mod_type(from._internal_mod_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RawLedgerObject::CopyFrom(const RawLedgerObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.RawLedgerObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawLedgerObject::IsInitialized() const {
  return true;
}

void RawLedgerObject::InternalSwap(RawLedgerObject* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.predecessor_, lhs_arena,
      &other->_impl_.predecessor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.successor_, lhs_arena,
      &other->_impl_.successor_, rhs_arena
  );
  swap(_impl_.mod_type_, other->_impl_.mod_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RawLedgerObject::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_2eproto_getter, &descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_2eproto_once,
      file_level_metadata_org_2fxrpl_2frpc_2fv1_2fledger_2eproto[1]);
}

// ===================================================================

class RawLedgerObjects::_Internal {
 public:
};

RawLedgerObjects::RawLedgerObjects(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:org.xrpl.rpc.v1.RawLedgerObjects)
}
RawLedgerObjects::RawLedgerObjects(const RawLedgerObjects& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RawLedgerObjects* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.objects_){from._impl_.objects_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.RawLedgerObjects)
}

inline void RawLedgerObjects::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.objects_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RawLedgerObjects::~RawLedgerObjects() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.RawLedgerObjects)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RawLedgerObjects::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.objects_.~RepeatedPtrField();
}

void RawLedgerObjects::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RawLedgerObjects::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.RawLedgerObjects)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.objects_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RawLedgerObjects::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .org.xrpl.rpc.v1.RawLedgerObject objects = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RawLedgerObjects::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.RawLedgerObjects)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .org.xrpl.rpc.v1.RawLedgerObject objects = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_objects_size()); i < n; i++) {
    const auto& repfield = this->_internal_objects(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.RawLedgerObjects)
  return target;
}

size_t RawLedgerObjects::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.RawLedgerObjects)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .org.xrpl.rpc.v1.RawLedgerObject objects = 1;
  total_size += 1UL * this->_internal_objects_size();
  for (const auto& msg : this->_impl_.objects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RawLedgerObjects::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RawLedgerObjects::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RawLedgerObjects::GetClassData() const { return &_class_data_; }


void RawLedgerObjects::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RawLedgerObjects*>(&to_msg);
  auto& from = static_cast<const RawLedgerObjects&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.RawLedgerObjects)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.objects_.MergeFrom(from._impl_.objects_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RawLedgerObjects::CopyFrom(const RawLedgerObjects& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.RawLedgerObjects)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawLedgerObjects::IsInitialized() const {
  return true;
}

void RawLedgerObjects::InternalSwap(RawLedgerObjects* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.objects_.InternalSwap(&other->_impl_.objects_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RawLedgerObjects::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_2eproto_getter, &descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_2eproto_once,
      file_level_metadata_org_2fxrpl_2frpc_2fv1_2fledger_2eproto[2]);
}

// ===================================================================

class BookSuccessor::_Internal {
 public:
};

BookSuccessor::BookSuccessor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:org.xrpl.rpc.v1.BookSuccessor)
}
BookSuccessor::BookSuccessor(const BookSuccessor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BookSuccessor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.book_base_){}
    , decltype(_impl_.first_book_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.book_base_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.book_base_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_book_base().empty()) {
    _this->_impl_.book_base_.Set(from._internal_book_base(), 
      _this->GetArenaForAllocation());
  }
  _impl_.first_book_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.first_book_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_first_book().empty()) {
    _this->_impl_.first_book_.Set(from._internal_first_book(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:org.xrpl.rpc.v1.BookSuccessor)
}

inline void BookSuccessor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.book_base_){}
    , decltype(_impl_.first_book_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.book_base_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.book_base_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.first_book_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.first_book_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BookSuccessor::~BookSuccessor() {
  // @@protoc_insertion_point(destructor:org.xrpl.rpc.v1.BookSuccessor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BookSuccessor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.book_base_.Destroy();
  _impl_.first_book_.Destroy();
}

void BookSuccessor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BookSuccessor::Clear() {
// @@protoc_insertion_point(message_clear_start:org.xrpl.rpc.v1.BookSuccessor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.book_base_.ClearToEmpty();
  _impl_.first_book_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BookSuccessor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes book_base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_book_base();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes first_book = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_first_book();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BookSuccessor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.xrpl.rpc.v1.BookSuccessor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes book_base = 1;
  if (!this->_internal_book_base().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_book_base(), target);
  }

  // bytes first_book = 2;
  if (!this->_internal_first_book().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_first_book(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.xrpl.rpc.v1.BookSuccessor)
  return target;
}

size_t BookSuccessor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.xrpl.rpc.v1.BookSuccessor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes book_base = 1;
  if (!this->_internal_book_base().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_book_base());
  }

  // bytes first_book = 2;
  if (!this->_internal_first_book().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_first_book());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BookSuccessor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BookSuccessor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BookSuccessor::GetClassData() const { return &_class_data_; }


void BookSuccessor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BookSuccessor*>(&to_msg);
  auto& from = static_cast<const BookSuccessor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:org.xrpl.rpc.v1.BookSuccessor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_book_base().empty()) {
    _this->_internal_set_book_base(from._internal_book_base());
  }
  if (!from._internal_first_book().empty()) {
    _this->_internal_set_first_book(from._internal_first_book());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BookSuccessor::CopyFrom(const BookSuccessor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.xrpl.rpc.v1.BookSuccessor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BookSuccessor::IsInitialized() const {
  return true;
}

void BookSuccessor::InternalSwap(BookSuccessor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.book_base_, lhs_arena,
      &other->_impl_.book_base_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.first_book_, lhs_arena,
      &other->_impl_.first_book_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BookSuccessor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_2eproto_getter, &descriptor_table_org_2fxrpl_2frpc_2fv1_2fledger_2eproto_once,
      file_level_metadata_org_2fxrpl_2frpc_2fv1_2fledger_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace rpc
}  // namespace xrpl
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::LedgerSpecifier*
Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::LedgerSpecifier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::org::xrpl::rpc::v1::LedgerSpecifier >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::RawLedgerObject*
Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::RawLedgerObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::org::xrpl::rpc::v1::RawLedgerObject >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::RawLedgerObjects*
Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::RawLedgerObjects >(Arena* arena) {
  return Arena::CreateMessageInternal< ::org::xrpl::rpc::v1::RawLedgerObjects >(arena);
}
template<> PROTOBUF_NOINLINE ::org::xrpl::rpc::v1::BookSuccessor*
Arena::CreateMaybeMessage< ::org::xrpl::rpc::v1::BookSuccessor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::org::xrpl::rpc::v1::BookSuccessor >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
